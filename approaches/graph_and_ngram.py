import os
import time

import graph.graph_predict as graph_approach
import n_gram.secondrandomforest as opcode_approach

results = dict()
apk_file_location = '/home/mkr/Desktop/projects/python/databases/cic_and_mal_2017/apks/test_fam/scareware_10261625aa8ca539ecd2a870c8bbc086.apk'
logTag = 'System'


def display(res):
    print '----------------------------'
    print 'File: %s' % apk_file_location
    print 'Class: %s' % res['className']
    print 'Probability: %s' % res['probability']
    print 'All probs: %s' % res['probabilityAll']
    print '----------------------------'


def save_results(className, prob, probAll):
    results['className'] = className
    results['probability'] = prob
    results['probabilityAll'] = probAll


print '[%s]: File: %s' % (logTag, os.path.basename(apk_file_location))
print '[%s]: Size: %s KB' % (logTag, os.path.getsize(apk_file_location) / 1000)

print '[Graph]: Starting...'
start_time = time.time()
graph_class_name, graph_prediction_probability, graph_prediction_probability_all = graph_approach.predict(apk_file_location=apk_file_location)
print '[Graph]: Duration: %s sec.' % (time.time() - start_time)

save_results(graph_class_name, graph_prediction_probability, graph_prediction_probability_all)

if graph_prediction_probability < 0.5:
    start_time = time.time()
    print '[Opcode]: Starting...'
    opcode_class_name, opcode_prediction_probability, opcode_prediction_probability_all = opcode_approach.predict(apk_file_location=apk_file_location)
    print '[Opcode]: Duration: %s sec.' % (time.time() - start_time)

    if opcode_prediction_probability > graph_prediction_probability:
        save_results(opcode_class_name, opcode_prediction_probability, opcode_prediction_probability_all)

display(results)
