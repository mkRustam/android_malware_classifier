import pandas as pd
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.ensemble import AdaBoostClassifier, RandomForestClassifier
from sklearn.linear_model import LogisticRegressionCV, LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB, GaussianNB, ComplementNB
from sklearn.svm import SVC, LinearSVC

from utils import constants

subtrainLabel = pd.read_csv(constants.CSV_SUBTRAIN)
subtrainfeature = pd.read_csv(constants.CSV_FEATURES_NGRAM)
subtrain = pd.merge(subtrainLabel, subtrainfeature, on='Id')
labels = subtrain.Class
subtrain.drop(["Class", "Id"], axis=1, inplace=True)
subtrain = subtrain.as_matrix()

X_train, X_test, y_train, y_test = train_test_split(subtrain, labels, test_size=0.2, random_state=0)


def svc_linear_method():
    clf = SVC(kernel='linear')
    clf.fit(X_train, y_train)
    clf_predictions = clf.predict(X_test)
    print("[SVC]: Accuracy: {}%".format(clf.score(X_test, y_test) * 100))


def svc_rbf_prob_method():
    clf = SVC(kernel='rbf', probability=True)
    clf.fit(X_train, y_train)
    clf_predictions = clf.predict(X_test)
    print("[SVC]: Accuracy: {}%".format(clf.score(X_test, y_test) * 100))


def svc_poly_method():
    clf = SVC(kernel='poly', degree=4)
    clf.fit(X_train, y_train)
    clf_predictions = clf.predict(X_test)
    print("[SVC]: Accuracy: {}%".format(clf.score(X_test, y_test) * 100))


def rf_method():
    srf = RandomForestClassifier(n_estimators=500, n_jobs=-1)
    srf.fit(X_train, y_train)
    srf_predictions = srf.predict(X_test)
    print("[RF]: Accuracy: {}%".format(srf.score(X_test, y_test) * 100))


def rfc_method():
    srf = RandomForestClassifier(n_estimators=500, n_jobs=-1, criterion='entropy')
    srf.fit(X_train, y_train)
    srf_predictions = srf.predict(X_test)
    print("[RFC]: Accuracy: {}%".format(srf.score(X_test, y_test) * 100))


def svc_best_params_method():
    # FIRST. Calculating the best params for SVM() method
    # param_grid = {'C': [0.1, 1, 10, 100], 'gamma': [1, 0.1, 0.01, 0.001, 0.00001, 10]}
    # clf_grid = GridSearchCV(SVC(), param_grid, verbose=1)
    # clf_grid.fit(X_train, y_train)
    # print("Best Parameters:\n", clf_grid.best_params_)
    # out: ('Best Parameters:\n', {'C': 10, 'gamma': 0.1})

    # SECOND. By using suggested params do prediction
    clf = SVC(kernel='rbf', C=10, gamma=0.1)
    clf.fit(X_train, y_train)
    clf_predictions = clf.predict(X_test)
    print("[SVC]: Accuracy: {}%".format(clf.score(X_test, y_test) * 100))


def gbc_method():
    srf = GradientBoostingClassifier(n_estimators=300)
    srf.fit(X_train, y_train)
    srf_predictions = srf.predict(X_test)
    print("[GBC]: Accuracy: {}%".format(srf.score(X_test, y_test) * 100))


def mnb_method():
    srf = MultinomialNB()
    srf.fit(X_train, y_train)
    srf_predictions = srf.predict(X_test)
    print("[MNB]: Accuracy: {}%".format(srf.score(X_test, y_test) * 100))


def lr_method():
    srf = LogisticRegression()
    srf.fit(X_train, y_train)
    srf_predictions = srf.predict(X_test)
    print("[LG ]: Accuracy: {}%".format(srf.score(X_test, y_test) * 100))


def lrcv_method():
    srf = LogisticRegressionCV()
    srf.fit(X_train, y_train)
    srf_predictions = srf.predict(X_test)
    print("[LRCV]: Accuracy: {}%".format(srf.score(X_test, y_test) * 100))


def adb_method():
    srf = AdaBoostClassifier()
    srf.fit(X_train, y_train)
    srf_predictions = srf.predict(X_test)
    print("[ADB]: Accuracy: {}%".format(srf.score(X_test, y_test) * 100))


def lscv_method():
    srf = LinearSVC(random_state=0, max_iter=10000)
    srf.fit(X_train, y_train)
    srf_predictions = srf.predict(X_test)
    print("[LSCV]: Accuracy: {}%".format(srf.score(X_test, y_test) * 100))


def gnb_method():
    srf = GaussianNB()
    srf.fit(X_train, y_train)
    srf_predictions = srf.predict(X_test)
    print("[GNB]: Accuracy: {}%".format(srf.score(X_test, y_test) * 100))


def cnb_method():
    srf = ComplementNB()
    srf.fit(X_train, y_train)
    srf_predictions = srf.predict(X_test)
    print("[CNB]: Accuracy: {}%".format(srf.score(X_test, y_test) * 100))


def lda_method():
    srf = LinearDiscriminantAnalysis(solver='lsqr')
    srf.fit(X_train, y_train)
    srf_predictions = srf.predict(X_test)
    print("[LDA]: Accuracy: {}%".format(srf.score(X_test, y_test) * 100))


rfc_method()
