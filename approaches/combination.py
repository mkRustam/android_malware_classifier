import os
import time
import graph.graph_predict as graph_approach
import n_gram.secondrandomforest as opcode_approach
import grayscaled_image.img_train_model2 as img_approach

calc_results = dict()
apk_file_location = '/home/mkr/Desktop/projects/python/databases/cic_and_mal_2017/apks/test_fam/scareware_10261625aa8ca539ecd2a870c8bbc086.apk'
logTag = 'System'


def display(res):
    print '----------------------------'
    print 'File:        %s' % apk_file_location
    print 'Class:       %s' % res['className']
    print 'Approach:    %s' % res['approach']
    print 'Probability: %s' % res['probability']
    print 'All probs:   %s' % res['probabilityAll']
    print '----------------------------'


def save_results(className, prob, probAll, approach):
    calc_results[approach]['className'] = className
    calc_results[approach]['probability'] = prob
    calc_results[approach]['probabilityAll'] = probAll


print '[%s]: File: %s' % (logTag, os.path.basename(apk_file_location))
print '[%s]: Size: %s KB' % (logTag, os.path.getsize(apk_file_location) / 1000)

print '[Graph]: Starting...'
start_time = time.time()
graph_class_name, graph_prediction_probability, graph_prediction_probability_all, file_json = graph_approach.predict(apk_file_location=apk_file_location)
print '[Graph]: Duration: %s sec.' % (time.time() - start_time)

save_results(graph_class_name, graph_prediction_probability, graph_prediction_probability_all, 'Graph')

if graph_prediction_probability < 0.5:
    print '[Image]: Starting...'
    start_time = time.time()
    img_class_name, img_prediction_probability, img_prediction_probability_all = img_approach.predict(path_to_json=file_json)
    print '[Image]: Duration: %s sec.' % (time.time() - start_time)
    save_results(graph_class_name, graph_prediction_probability, graph_prediction_probability_all, 'Image')

    if img_prediction_probability < 0.5:
        print '[Opcode]: Starting...'
        start_time = time.time()
        opcode_class_name, opcode_prediction_probability, opcode_prediction_probability_all = opcode_approach.predict(apk_file_location=apk_file_location)
        print '[Opcode]: Duration: %s sec.' % (time.time() - start_time)
        save_results(graph_class_name, graph_prediction_probability, graph_prediction_probability_all, 'Opcode')

result = dict()
max_prob = 0
for approach in ["Image", "Graph", "Opcode"]:
    if calc_results[approach]['probability'] > max_prob:
        result['approach'] = approach
        result = calc_results[approach]

display(result)
