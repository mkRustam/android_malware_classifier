import os
from scipy.misc import imsave
import array
import numpy as np
import shutil
import pandas as pd
from utils import constants
from PIL import Image

imgs_path = constants.FOLDER_ROOT + '/approaches/grayscaled_image/imgs'
valid_path = constants.FOLDER_ROOT + '/approaches/grayscaled_image/valid'


# Create folders from classes.csv
def prepare_imgs_folder():
    def clear(path):
        for path, dirs, files in os.walk(path):
            for d in dirs:
                shutil.rmtree('%s/%s' % (path, d))
            for f in files:
                os.remove('%s/%s' % (path, f))
        print 'Image folder was cleared'

    def create_class_folders(path):
        malware_classes = pd.read_csv(constants.CSV_CLASSES)
        for className in malware_classes.ClassName:
            os.mkdir('%s/%s' % (path, className))
        print 'Classes folders were created'

    clear(imgs_path)
    create_class_folders(imgs_path)

    clear(valid_path)
    create_class_folders(valid_path)


def convert_file_to_png(file_path, img_save_trg):
    f = open(file_path, 'rb')
    ln = os.path.getsize(file_path)
    width = 256
    rem = ln % width

    a = array.array("B")
    a.fromfile(f, ln - rem)

    f.close()

    g = np.reshape(a, (len(a) / width, width))
    g = np.uint32(g)

    imsave('%s.png' % img_save_trg, g)

    im = Image.open('%s.png' % img_save_trg)
    im2 = im.resize((255, 255), Image.BICUBIC)
    im2.save('%s.png' % img_save_trg)


def convert_all_files_to_imgs(path_to_files):
    subtrains = pd.read_csv(constants.CSV_SUBTRAIN)
    malware_classes = pd.read_csv(constants.CSV_CLASSES)

    ids = []
    for item in subtrains.Id:
        ids.append(item)

    for id in ids:
        id_class = subtrains[subtrains.Id == id].Class.get_values()[0]
        id_class_name = malware_classes[malware_classes.ClassId == id_class].ClassName.get_values()[0]
        target_file_path = '%s/%s/%s.json' % (path_to_files, id_class_name, id)
        img_path_src = '%s/%s/%s' % (imgs_path, id_class_name, id)
        if os.path.exists(target_file_path):
            if os.path.getsize(target_file_path) > 1000:
                print target_file_path
                convert_file_to_png(target_file_path, img_path_src)


def prepare_validation_dataset():
    subtrains = pd.read_csv(constants.CSV_SUBTRAIN)
    malware_classes = pd.read_csv(constants.CSV_CLASSES)

    ids = []
    for item in subtrains.Id:
        ids.append(item)

    currentNumber = 0

    for id in ids:
        id_class = subtrains[subtrains.Id == id].Class.get_values()[0]
        id_class_name = malware_classes[malware_classes.ClassId == id_class].ClassName.get_values()[0]
        img_path_src = '%s/%s/%s.png' % (imgs_path, id_class_name, id)
        target_img_path_src = '%s/%s/%s.png' % (valid_path, id_class_name, id)
        each_file_number = 5
        if os.path.exists(img_path_src):
            currentNumber += 1
            if currentNumber == each_file_number:
                currentNumber = 0
                print '-----'
                print 'From  : %s' % img_path_src
                print 'To    : %s' % target_img_path_src
                shutil.move(img_path_src, target_img_path_src)
                print 'Result: Success'


if __name__ == '__main__':
    folder_with_files = constants.FOLDER_ROOT + '/approaches/graph/train'
    # prepare_imgs_folder()
    convert_all_files_to_imgs(folder_with_files)
    prepare_validation_dataset()
