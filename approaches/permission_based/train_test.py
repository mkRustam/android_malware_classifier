from collections import Counter

from sklearn.ensemble import RandomForestClassifier as RF
from sklearn.model_selection import train_test_split
import pandas as pd
from utils import constants, opcode_sequence
from androguard.misc import APK
import androguard_helper

subtrainLabel = pd.read_csv(constants.CSV_SUBTRAIN)
subtrainfeature = pd.read_csv(constants.CSV_FEATURES_INTENTS)
malware_classes = pd.read_csv(constants.CSV_CLASSES)

subtrain = pd.merge(subtrainLabel, subtrainfeature, on='Id')
labels = subtrain.Class
subtrain.drop(["Class", "Id"], axis=1, inplace=True)
subtrain = subtrain.as_matrix()

X_train, X_test, y_train, y_test = train_test_split(subtrain, labels, test_size=0.3)

srf = RF(n_estimators=500, n_jobs=-1)
srf.fit(X_train, y_train)
print srf.score(X_test, y_test)

apk_file_location = '/home/mkr/Desktop/projects/python/databases/cic_and_mal_2017/apks/test_fam/scareware_10261625aa8ca539ecd2a870c8bbc086.apk'
apk_intent_filters = Counter(androguard_helper.get_all_intent_filters(APK(apk_file_location)))

subtrainfeature = subtrainfeature.drop(["Id"], axis=1)

tmp_counter = []
for column_index in range(0, len(subtrainfeature._get_axis(1))):
    val = 0
    key = None
    for i in apk_intent_filters:
        v1 = str(subtrainfeature._get_axis(1)[column_index])
        v2 = str(i)
        key = v1
        if v1 == v2:
            val = apk_intent_filters[i]
            break
    tmp_counter.append(val)

predicted_class = srf.predict([tmp_counter])
prediction_probability_all = srf.predict_proba([tmp_counter])

# Show only class number and prediction probability
predicted_class = predicted_class.flatten()[0]
prediction_probability = prediction_probability_all.flatten()[predicted_class - 1]

print '----------------------------'
class_name = malware_classes[malware_classes.ClassId == predicted_class].ClassName.get_values()[0]
print 'Class: %s' % class_name
print 'Probability: %s' % str(prediction_probability)
print prediction_probability_all
print '----------------------------'
