import networkx as nx
from GraphPoint import GraphPoint
from androguard.core.analysis.analysis import ExternalMethod


def get_graph(a, d, dx):
    graph = nx.DiGraph()
    for m in dx.find_methods():
        orig_method = m.get_method()

        # orig_method might be a ExternalMethod too...
        # so you can check it here also:
        if isinstance(orig_method, ExternalMethod):
            is_this_external = True
            # If this class is external, there will be very likely
            # no xref_to stored! If there is, it is probably a bug in androguard...
        else:
            is_this_external = False

        node_name = GraphPoint(orig_method).get_point(a)

        graph.add_node(node_name, external=is_this_external)

        for other_class, callee, offset in m.get_xref_to():
            if isinstance(callee, ExternalMethod):
                is_external = True
            else:
                is_external = False

            node_child_name = GraphPoint(callee).get_point(a)

            if node_child_name not in graph.node:
                graph.add_node(node_child_name, external=is_external)

            # As this is a DiGraph and we are not interested in duplicate edges,
            # check if the edge is already in the edge set.
            # If you need all calls, you probably want to check out MultiDiGraph
            if not graph.has_edge(node_name, node_child_name):
                graph.add_edge(node_name, node_child_name)
    return graph
