import json
import os
import shutil

import matplotlib.pyplot as plt
import networkx as nx
import pandas as pd

import graph_utils
from androguard.misc import AnalyzeAPK
from approaches.graph.GraphObject import GraphObject
from utils import constants

files_path = constants.FOLDER_ROOT + '/approaches/graph/train'


def create_and_save_graph(path_to_apk, path_to_save):
    a, d, dx = AnalyzeAPK(path_to_apk)
    # print a.show()
    CFG = graph_utils.get_graph(a, d, dx)
    # nx.write_gml(CFG)
    save_graph(CFG, path_to_save)


def read_and_show_graph(path_to_graph):
    CFG = nx.DiGraph(nx.read_gml(path_to_graph))
    plt.figure(figsize=(10, 10))
    nx.draw_networkx(CFG, with_labels=True, font_size=14, width=1)
    plt.draw()
    plt.show()


def save_graph(graph, filename):
    edges = []
    nodes = []
    for edge in graph.edges:
        item = dict()
        item['source'] = edge[0]
        item['target'] = edge[1]
        edges.append(item)

    for node in graph.nodes:
        nodes.append(node)

    obj = GraphObject(edges=edges, nodes=nodes)
    with open(filename, 'w') as outfile:
        json.dump(obj.get_dict(), outfile)


def prepare_train_folder():
    def clear():
        for path, dirs, files in os.walk(files_path):
            for d in dirs:
                shutil.rmtree('%s/%s' % (files_path, d))
            for f in files:
                os.remove('%s/%s' % (files_path, f))
        print 'Classes folder were cleared'

    def create_class_folders():
        malware_classes = pd.read_csv(constants.CSV_CLASSES)
        for className in malware_classes.ClassName:
            os.mkdir('%s/%s' % (files_path, className))
        print 'Classes folders were created'

    clear()
    create_class_folders()


def extract_all_graphs():
    subtrains = pd.read_csv(constants.CSV_SUBTRAIN)
    malware_classes = pd.read_csv(constants.CSV_CLASSES)
    apks_root_target = '/home/mkr/Desktop/projects/python/databases/cic_and_mal_2017/subtrain_apks'
    ids = []
    for item in subtrains.Id:
        ids.append(item)

    for id in ids:
        print id
        id_class = subtrains[subtrains.Id == id].Class.get_values()[0]
        id_class_name = malware_classes[malware_classes.ClassId == id_class].ClassName.get_values()[0]
        apk_path_src = '%s/%s/%s.apk' % (apks_root_target, id_class_name, id)
        save_path_src = '%s/%s/%s.json' % (files_path, id_class_name, id)
        print apk_path_src
        create_and_save_graph(path_to_apk=apk_path_src, path_to_save=save_path_src)


if __name__ == '__main__':
    extract_all_graphs()
    # create_and_save_graph(path_to_apk="/home/mkr/Desktop/projects/python/databases/cic_and_mal_2017/train/Adware/5dc565a01bb789d8d171c20f52ac34c8.apk")
    # read_and_show_graph("1634b1fb3b353019e9d3b7b3d21507ab.graph")

    # prepare_train_folder()
