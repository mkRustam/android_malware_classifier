import hashlib
import os
import xml.etree.ElementTree as ET
import matplotlib.pyplot as plt
import networkx as nx

import xmltodict
import json

import graph_utils
from androguard.misc import AnalyzeAPK
from approaches.graph.GraphObject import GraphObject


def create_and_save_graph(path_to_apk):
    a, d, dx = AnalyzeAPK(path_to_apk)
    # print a.show()
    CFG = graph_utils.get_graph(a, d, dx)
    # nx.write_gml(CFG)
    save_graph(CFG, os.path.basename(path_to_apk).replace(".apk", ".json"))


def save_graph(graph, filename):
    edges = []
    nodes = []
    for edge in graph.edges:
        item = dict()
        item['source'] = edge[0]
        item['target'] = edge[1]
        edges.append(item)

    for node in graph.nodes:
        nodes.append(node)

    obj = GraphObject(edges=edges, nodes=nodes)
    with open(filename, 'w') as outfile:
        json.dump(obj.get_dict(), outfile)


# can read only nx.write_gml(CFG) files
def read_and_show_graph(path_to_graph):
    CFG = nx.DiGraph(nx.read_gexf(path_to_graph))
    plt.figure(figsize=(10, 10))
    nx.draw_networkx(CFG, with_labels=True, font_size=14, width=1)
    plt.draw()
    plt.show()


def combine_graphs(path1, path2):
    g1 = nx.DiGraph(nx.read_gexf(path1))
    g2 = nx.DiGraph(nx.read_gexf(path2))
    g = nx.compose(g1, g2)
    nx.draw_networkx(g, with_labels=True, font_size=14, width=1)
    nx.write_gexf(g, 'combination.graph')


if __name__ == '__main__':
    create_and_save_graph("/home/mkr/Desktop/projects/python/databases/cic_and_mal_2017/train/Adware/5dc565a01bb789d8d171c20f52ac34c8.apk")
    # create_and_save_graph("/home/mkr/Desktop/projects/python/databases/cic_and_mal_2017/train/Adware/1634b1fb3b353019e9d3b7b3d21507ab.apk")

    # read_and_show_graph("5dc565a01bb789d8d171c20f52ac34c8.graph")
    # read_and_show_graph("1634b1fb3b353019e9d3b7b3d21507ab.graph")
