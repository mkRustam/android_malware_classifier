import json
import os
from collections import *
import pandas as pd
from utils import constants


def getEdgesSequence(filename):
    if filename.endswith('.json'):
        with open(filename, 'r') as f:
            d = json.load(f)
            return d['edges']


def getOpcodeNgram(ops, n=constants.N_GRAM):
    opngramlist = [tuple(ops[i:i + n]) for i in range(len(ops) - n)]
    opngram = Counter(opngramlist)
    return opngram


basepath = constants.FOLDER_ROOT + '/approaches/graph/train/'
map3gram = defaultdict(Counter)
subtrain = pd.read_csv(constants.CSV_SUBTRAIN)
malware_classes = pd.read_csv(constants.CSV_CLASSES)

files = []

count = 0
for row in subtrain.get_values():
    malware_class_name = malware_classes[malware_classes.ClassId == row[1]].ClassName.get_values()[0]
    filename = basepath + malware_class_name + '/' + row[0] + ".json"
    if os.path.exists(filename):
        count += 1
        print '[%s]: %s In Process' % (count, filename)
        print '[%s]: Size: %s KB' % (count, os.path.getsize(filename) / 1000.0)
        print '[%s]: Get Opcode Sequence ...' % count
        edges = getEdgesSequence(filename)
        print '[%s]: Get Opcode Ngram ...' % count
        op3gram = getOpcodeNgram(edges)
        print '[%s]: Finishing ...' % count
        map3gram[row[0]] = op3gram
        print '[%s]: Done!' % count
        files.append([row[0], row[1]])

cc = Counter([])
for d in map3gram.values():
    cc += d
selectedfeatures = {}
tc = 0
for k, v in cc.iteritems():
    if v >= 100:
        selectedfeatures[k] = v
        print k, v
        tc += 1
dataframelist = []
for fid, op3gram in map3gram.iteritems():
    standard = {}
    standard["Id"] = fid
    for feature in selectedfeatures:
        if feature in op3gram:
            standard[feature] = op3gram[feature]
        else:
            standard[feature] = 0
    dataframelist.append(standard)

df = pd.DataFrame(dataframelist)
df.to_csv('api_calls_features.csv', index=False)

df2 = pd.DataFrame(files)
df2.to_csv('api_calls_files.csv', index=False)
