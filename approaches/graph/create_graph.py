import networkx as nx
from androguard.core.analysis.analysis import ExternalMethod
from androguard.misc import AnalyzeAPK
import matplotlib.pyplot as plt

a, d, dx = AnalyzeAPK(
    "/home/mkr/Desktop/projects/python/databases/cic_and_mal_2017/train/Adware/5dc565a01bb789d8d171c20f52ac34c8.apk")

print a.show()

CFG = nx.DiGraph()
# You can choose exact classname or whole apk (mess plot)
for m in dx.find_methods(classname='Ltest/app/MainActivity'):
    orig_method = m.get_method()

    # orig_method might be a ExternalMethod too...
    # so you can check it here also:
    if isinstance(orig_method, ExternalMethod):
        is_this_external = True
        # If this class is external, there will be very likely
        # no xref_to stored! If there is, it is probably a bug in androguard...
    else:
        is_this_external = False

    CFG.add_node(orig_method, external=is_this_external)

    for other_class, callee, offset in m.get_xref_to():
        if isinstance(callee, ExternalMethod):
            is_external = True
        else:
            is_external = False

        if callee not in CFG.node:
            CFG.add_node(callee, external=is_external)

        # As this is a DiGraph and we are not interested in duplicate edges,
        # check if the edge is already in the edge set.
        # If you need all calls, you probably want to check out MultiDiGraph
        if not CFG.has_edge(orig_method, callee):
            CFG.add_edge(orig_method, callee)

plt.figure(figsize=(10, 10))
nx.draw_networkx(CFG, with_labels=True, font_size=5, width=1)
plt.draw()
plt.show()
