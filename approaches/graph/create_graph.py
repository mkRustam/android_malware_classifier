import networkx as nx

from androguard.core.analysis.analysis import ExternalMethod
from androguard.misc import AnalyzeAPK

list_methods = []


class MyMethodClass(object):
    list_self_defined_classes = (
        'android.',
        'androidx.',
        'java.',
        'google.',
        'javax.',
        'xml.',
        'apache.',
        'junit.',
        'json.',
        'dom.',
        'dalvik.',
        'com.google.',
    )

    def __init__(self, className, methodName, whomDefined):
        self.className = className
        self.methodName = methodName.replace(';', '')
        self.whomDefined = whomDefined.replace(';', '')

    def show(self):
        print "Class Name: " + self.className + "\n" "Method Name: " + self.methodName + "\n" + "Type: " + self.whomDefined

    def __init__(self, encodedMethod):
        self.className = str(encodedMethod.get_class_name())
        if self.className.startswith('L'):
            self.className = self.className[1:]
        if self.className.endswith('.'):
            self.className = self.className[:-1]
        self.className = self.className.replace('/', '.')

        self.methodName = str(encodedMethod.get_name())

        self.whomDefined = "self_defined"
        for definer in self.list_self_defined_classes:
            if self.className.startswith(definer):
                self.whomDefined = definer

        if self.whomDefined.startswith('L'):
            self.whomDefined = self.whomDefined[1:]
        if self.whomDefined.endswith('.'):
            self.whomDefined = self.whomDefined[:-1]


a, d, dx = AnalyzeAPK(
    "/home/mkr/Desktop/projects/python/databases/cic_and_mal_2017/train/Adware/4b3b5b7d8d36301ac099b1de94f97c11.apk")
print a.show()

CFG = nx.DiGraph()

for m in dx.find_methods():
    orig_method = m.get_method()

    list_methods.append(MyMethodClass(orig_method))

    # orig_method might be a ExternalMethod too...
    # so you can check it here also:
    if isinstance(orig_method, ExternalMethod):
        is_this_external = True
        # If this class is external, there will be very likely
        # no xref_to stored! If there is, it is probably a bug in androguard...
    else:
        is_this_external = False

    CFG.add_node(orig_method, external=is_this_external)

    for other_class, callee, offset in m.get_xref_to():
        if isinstance(callee, ExternalMethod):
            is_external = True
        else:
            is_external = False

        if callee not in CFG.node:
            CFG.add_node(callee, external=is_external)

        # As this is a DiGraph and we are not interested in duplicate edges,
        # check if the edge is already in the edge set.
        # If you need all calls, you probably want to check out MultiDiGraph
        if not CFG.has_edge(orig_method, callee):
            CFG.add_edge(orig_method, callee)

for m in list_methods:
    print '==='
    m.show()

# If you want to see grapch uncomment the next 4 lines
# import matplotlib.pyplot as plt
# nx.draw_networkx(CFG)
# plt.draw()
# plt.show()
