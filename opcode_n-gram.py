import re
from collections import *
import os
import opcode_sequence
import pandas as pd
from androguard.core.bytecodes import apk
from androguard.misc import AnalyzeAPK


def getOpcodeSequence(filename):
    if filename.endswith('.opseq'):
        with open(filename, 'r') as file:
            return file.readlines()


def train_opcode_lm(ops, order=4):
    lm = defaultdict(Counter)
    prefix = ["~"] * order
    prefix.extend(ops)
    data = prefix
    for i in xrange(len(data) - order):
        history, char = tuple(data[i:i + order]), data[i + order]
        lm[history][char] += 1

    def normalize(counter):
        s = float(sum(counter.values()))
        return [(c, cnt / s) for c, cnt in counter.iteritems()]

    outlm = {hist: chars for hist, chars in lm.iteritems()}
    return outlm


def getOpcodeNgram(ops, n=3):
    opngramlist = [tuple(ops[i:i + n]) for i in range(len(ops) - n)]
    opngram = Counter(opngramlist)
    return opngram


basepath = '/home/mkr/Desktop/projects/python/databases/cic_and_mal_2017/subtrain/'
map3gram = defaultdict(Counter)
subtrain = pd.read_csv('subtrainLabels.csv')
malware_classes = pd.read_csv('classes.csv')

count = 0
for row in subtrain.get_values():
    count += 1
    malware_class_name = malware_classes[malware_classes.ClassId == row[1]].ClassName.get_values()[0]
    filename = basepath + malware_class_name + '/' + row[0] + ".opseq"
    print '[%s]: %s In Process' % (count, filename)
    print '[%s]: Size: %s KB' % (count, os.path.getsize(filename) / 1000.0)
    print '[%s]: Get Opcode Sequence ...' % count
    ops = getOpcodeSequence(filename)
    print '[%s]: Get Opcode Ngram ...' % count
    op3gram = getOpcodeNgram(ops)
    print '[%s]: Finishing ...' % count
    map3gram[row[0]] = op3gram
    print '[%s]: Done!' % count

cc = Counter([])
for d in map3gram.values():
    cc += d
selectedfeatures = {}
tc = 0
for k, v in cc.iteritems():
    if v >= 500:
        selectedfeatures[k] = v
        print k, v
        tc += 1
dataframelist = []
for fid, op3gram in map3gram.iteritems():
    standard = {}
    standard["Id"] = fid
    for feature in selectedfeatures:
        if feature in op3gram:
            standard[feature] = op3gram[feature]
        else:
            standard[feature] = 0
    dataframelist.append(standard)
df = pd.DataFrame(dataframelist)
df.to_csv("3gramfeature.csv", index=False)
