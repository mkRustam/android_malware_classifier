from sklearn.ensemble import RandomForestClassifier as RF
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix
import pandas as pd
import opcode_sequence

subtrainLabel = pd.read_csv('subtrainLabels.csv')
subtrainfeature = pd.read_csv("3gramfeature.csv")
subtrain = pd.merge(subtrainLabel, subtrainfeature, on='Id')
labels = subtrain.Class
subtrain.drop(["Class", "Id"], axis=1, inplace=True)
subtrain = subtrain.as_matrix()

X_train, X_test, y_train, y_test = train_test_split(subtrain, labels, test_size=0.3)

srf = RF(n_estimators=500, n_jobs=-1)
srf.fit(X_train, y_train)
print srf.score(X_test, y_test)
# y_pred = srf.predict(X_test)
# print y_pred
# print confusion_matrix(y_test, y_pred)


from collections import *
import os


def getOpcodeSequence(filename):
    with open(filename, 'r') as file:
        return file.readlines()


def getOpcodeNgram(ops, n=3):
    opngramlist = [tuple(ops[i:i + n]) for i in range(len(ops) - n)]
    opngram = Counter(opngramlist)
    return opngram


def extract_op3gram(apk_file_path):
    inv_limit = 1000
    rec_depth = 5
    opcode_sequence.seq_extraction(apk_file_path, inv_limit, rec_depth)
    opseq_path = '%s/%s' % (apk_file_path.replace('.apk', ''), 'opcode_sequence.txt')
    opcodes = getOpcodeSequence(opseq_path)
    op3gram = getOpcodeNgram(opcodes)
    return op3gram


apk_file_location = '/home/mkr/Desktop/projects/python/databases/cic_and_mal_2017/adware_2bcf8dd1233186ae267a67479fdd1e4b.apk'
op3grams = extract_op3gram(apk_file_location)

subtrainfeature = subtrainfeature.drop(["Id"], axis=1)

tmp_counter = []
for column_index in range(0, len(subtrainfeature._get_axis(1))):
    val = 0
    key = None
    for i in op3grams:
        v1 = str(subtrainfeature._get_axis(1)[column_index])
        v2 = str(i)
        key = v1
        if v1 == v2:
            val = op3grams[i]
            break
    tmp_counter.append(val)

print srf.predict([tmp_counter])
